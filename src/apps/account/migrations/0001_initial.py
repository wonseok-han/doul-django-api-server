# Generated by Django 3.2.4 on 2021-06-29 09:22

import apps.account.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="IssuedToken",
            fields=[
                (
                    "insert_user_id",
                    models.CharField(
                        db_column="INS_USER_ID", max_length=20, verbose_name="입력사용자아이디"
                    ),
                ),
                (
                    "insert_user_ip",
                    models.GenericIPAddressField(
                        db_column="INS_USER_IP", verbose_name="입력사용자아이디"
                    ),
                ),
                (
                    "insert_date_time",
                    models.DateTimeField(
                        auto_now_add=True, db_column="INS_DT", verbose_name="입력일시"
                    ),
                ),
                (
                    "update_user_id",
                    models.CharField(
                        blank=True,
                        db_column="UPD_USER_ID",
                        max_length=20,
                        verbose_name="수정사용자아이디",
                    ),
                ),
                (
                    "update_user_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        db_column="UPD_USER_IP",
                        null=True,
                        verbose_name="수정사용자IP",
                    ),
                ),
                (
                    "update_date_time",
                    models.DateTimeField(
                        auto_now=True,
                        db_column="UPD_DT",
                        null=True,
                        verbose_name="수정일시",
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        db_column="USER_ACCREDIT_TOKEN_CONTENT",
                        max_length=500,
                        primary_key=True,
                        serialize=False,
                        verbose_name="사용자인증토큰내용",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_column="USER_ACCREDIT_LOGIN_FG", verbose_name="사용자인증로그인여부"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        db_column="USER_ACCREDIT_STAFF_FG", verbose_name="사용자인증직원여부"
                    ),
                ),
                (
                    "is_anonymous",
                    models.BooleanField(
                        db_column="USER_ACCREDIT_UNSIGN_FG", verbose_name="사용자인증무기명여부"
                    ),
                ),
                (
                    "is_authenticated",
                    models.BooleanField(
                        db_column="USER_ACCREDIT_AUTH_FG", verbose_name="사용자인증권한여부"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        db_column="USER_ACCREDIT_BEST_MNG_USER_FG",
                        verbose_name="사용자인증최고관리사용자여부",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        db_column="USER_ACCREDIT_EXPIRE_DT",
                        null=True,
                        verbose_name="사용자인증만료일시",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        db_column="USER_ACCREDIT_CREATE_DT",
                        null=True,
                        verbose_name="사용자인증생성일시",
                    ),
                ),
            ],
            options={
                "verbose_name": "공통.사용자인증",
                "db_table": "SYSTEM_USER_TOKEN",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SystemUser",
            fields=[
                (
                    "insert_user_id",
                    models.CharField(
                        db_column="INS_USER_ID", max_length=20, verbose_name="입력사용자아이디"
                    ),
                ),
                (
                    "insert_user_ip",
                    models.GenericIPAddressField(
                        db_column="INS_USER_IP", verbose_name="입력사용자아이디"
                    ),
                ),
                (
                    "insert_date_time",
                    models.DateTimeField(
                        auto_now_add=True, db_column="INS_DT", verbose_name="입력일시"
                    ),
                ),
                (
                    "update_user_id",
                    models.CharField(
                        blank=True,
                        db_column="UPD_USER_ID",
                        max_length=20,
                        verbose_name="수정사용자아이디",
                    ),
                ),
                (
                    "update_user_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        db_column="UPD_USER_IP",
                        null=True,
                        verbose_name="수정사용자IP",
                    ),
                ),
                (
                    "update_date_time",
                    models.DateTimeField(
                        auto_now=True,
                        db_column="UPD_DT",
                        null=True,
                        verbose_name="수정일시",
                    ),
                ),
                ("is_active", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_anonymous", models.BooleanField(default=False)),
                ("is_authenticated", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                ("expires_at", models.DateTimeField(db_index=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("token", models.CharField(db_index=True, max_length=500)),
                (
                    "username",
                    models.CharField(
                        db_column="USER_ID",
                        max_length=20,
                        primary_key=True,
                        serialize=False,
                        verbose_name="사용자아이디",
                    ),
                ),
                (
                    "name",
                    models.CharField(db_column="NM", max_length=50, verbose_name="이름"),
                ),
                (
                    "password",
                    models.BinaryField(db_column="PASSWORD", verbose_name="비밀번호"),
                ),
            ],
            options={
                "verbose_name": "사용자",
                "db_table": "SYSTEM_USER",
                "managed": False,
            },
            managers=[
                ("objects", apps.account.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
