"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import datetime
import os

from pathlib import Path
from environ import Env
from typing import List

env = Env()

# 이미 정의된 환경변수에 대해 .env 환경변수가 overwrite 가능토록 합니다.
env.ENVIRON.setdefault = env.ENVIRON.__setitem__

BASE_DIR = Path(__file__).resolve(strict=True).parent.parent.parent

dot_env_path = BASE_DIR / ".." / ".env"
if dot_env_path.exists():
    # .env에 한글 주석을 사용할 수 있습니다.
    with dot_env_path.open(encoding="utf-8") as f:
        env.read_env(f)

# 환경변수로 env 파일 경로가 주어질 때, 이를 읽어들여 env에 반영합니다.
# docker secret을 통해 django-environ 포맷의 문자열이 지정될 수 있습니다.
env_path = env.str("ENV_PATH", None)
if env_path and Path(env_path).exists():
    env.read_env(env_path)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-5&6$d!)gr_-#6+0)uin9*lq-v^0gw66b*2p+sqannma-sp2xc_"
)

DEBUG = env.bool("DEBUG", True)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third Apps
    "corsheaders",
    "django_extensions",
    "rest_framework",
    "rest_framework_jwt",
    # local Apps
    "core",
    "apps.account",
    "apps.system",
]

IGNORE_INSTALLED_APPS = env.list("IGNORE_INSTALLED_APPS", default=[])
INSTALLED_APPS = [
    app_name for app_name in INSTALLED_APPS if app_name not in IGNORE_INSTALLED_APPS
]

MIDDLEWARE = [
    # 항상 SecurityMiddleware가 처음에 위치해야 합니다. prod.py에서 참조합니다.
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.PatchHttpMethodMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


DATABASES = {
    "default": env.db(default=f"sqlite:///{BASE_DIR / '..' / 'db.sqlite3'}"),
}

# DATABASE_NAMES 환경변수 리스트에 지정된 이름에 대해서
# default 데이터베이스 설정을 복제하여 NAME만 변경하여 적용토록 합니다.
DATABASE_NAMES: List[str] = env.list("DATABASE_NAMES", default=[])

if DATABASE_NAMES:
    for db_name in DATABASE_NAMES:
        db_alias = db_name.lower()
        default_db_name = DATABASES["default"]["NAME"]

        if "sqlite3" in DATABASES["default"]["ENGINE"]:
            # NAME 은 sqlite3 파일 경로명으로 사용이 됩니다. 경로명에서 파일명만 변경합니다.
            sqlite3_dirpath = os.path.dirname(default_db_name)
            new_db_name = os.path.join(sqlite3_dirpath, f"{db_name}.sqlite3")
        else:
            new_db_name = db_name.lower()

        DATABASES[db_alias] = dict(DATABASES["default"], NAME=new_db_name)


DB_MULTI_JOIN = env.bool("DB_MULTI_JOIN", True)

if DB_MULTI_JOIN:
    db_settings_unique_identity = tuple(
        set(
            (db_settings["ENGINE"], db_settings["HOST"], db_settings["PORT"])
            for db_settings in DATABASES.values()
        )
    )
    assert (
        len(db_settings_unique_identity) == 1
    ), "멀티 DB JOIN 이 가능할려면, 모든 DB가 같은 Engine/Host/Port 상에 있어야만 합니다."
    UNIQUE_DB_ENGINE = db_settings_unique_identity[0][0]
else:
    UNIQUE_DB_ENGINE = None

# Database Router
DATABASE_ROUTERS = [
    "core.routers.Router",
]

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# 디폴트 언어
LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = env.bool("USE_I18N", True)

USE_L10N = env.bool("USE_L10N", True)

USE_TZ = env.bool("USE_TZ", False)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = []
STATIC_ROOT = BASE_DIR / ".." / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 환경변수로 빈 문자열을 지정 시에 DRF 디폴트 설정(AllowAny)이 적용됩니다.
DEFAULT_PERMISSION_CLASSES = env.list(
    "DEFAULT_PERMISSION_CLASSES", default=["rest_framework.permissions.IsAuthenticated"]
)

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "apps.account.authentication.TransferringUserJWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        # FIXME: UnderscoreOrdering
        # "core.filters.DoubleUnderscoreOrderingFilter",
        "rest_framework.filters.OrderingFilter",
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
    ],
    # FIXME: Pagination
    # "DEFAULT_PAGINATION_CLASS": "core.pagination.PageNumberPagination",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    # FIXME: Renderer
    # "DEFAULT_RENDERER_CLASSES": ["core.renderers.JSONRenderer"],
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],
    "DEFAULT_PERMISSION_CLASSES": DEFAULT_PERMISSION_CLASSES,
    # FIXME: Exeption Handler
    # "EXCEPTION_HANDLER": "core.views.custom_exception_handler",
    "EXCEPTION_HANDLER": "rest_framework.views.exception_handler",
    "PAGE_SIZE": env.int("PAGE_SIZE", 100000),
    "URL_FIELD_NAME": "permalink",
    "DATETIME_FORMAT": "%Y-%m-%d %H:%M:%S",
    "DATE_FORMAT": "%Y-%m-%d",
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.JSONParser",
    ],
}

AUTH_USER_MODEL = "account.User"

JWT_SECRET_KEY = env.str("JWT_SECRET_KEY", SECRET_KEY)
JWT_EXPIRATION_DELTA_MINUTES = env.int("JWT_EXPIRATION_DELTA_MINUTES", 600)
JWT_REFRESH_EXPIRATION_DELTA_DAYS = env.int("JWT_REFRESH_EXPIRATION_DELTA_DAYS", 10)

JWT_AUTH = {
    "JWT_SECRET_KEY": SECRET_KEY,
    "JWT_ALGORITHM": "HS256",
    "JWT_VERIFY": True,
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_EXPIRATION_DELTA": datetime.timedelta(minutes=JWT_EXPIRATION_DELTA_MINUTES),
    # 지정하면 payload 생성 시에 orig_iat 클레임이 추가됩니다. RefreshAuthTokenSerializer에서 체킹합니다.
    "JWT_ALLOW_REFRESH": True,
    # 갱신 최대 시간 : 아래 시간 이후에는 id/pw 재인증이 필요합니다. 무제한 연장은 위험합니다.
    "JWT_REFRESH_EXPIRATION_DELTA": datetime.timedelta(
        days=JWT_REFRESH_EXPIRATION_DELTA_DAYS
    ),
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
    "JWT_AUTH_COOKIE": None,
    "JWT_AUTH_COOKIE_DOMAIN": None,
    "JWT_AUTH_COOKIE_PATH": "/",
    "JWT_AUTH_COOKIE_SECURE": True,
    "JWT_IMPERSONATION_COOKIE": None,
    # "JWT_RESPONSE_PAYLOAD_HANDLER": "rest_framework_jwt.utils.jwt_create_response_payload",
}

CORS_ALLOWED_ORIGINS = env.list(
    "CORS_ALLOWED_ORIGINS", default=["http://localhost:3000", "http://localhost:8080"]
)
CORS_ORIGIN_ALLOW_ALL = env.bool("CORS_ORIGIN_ALLOW_ALL", False)

# Reverse Proxy 대응
USE_X_FORWARDED_IP = env.bool("USE_X_FORWARDED_IP", False)
if USE_X_FORWARDED_IP:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
